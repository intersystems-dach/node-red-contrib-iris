{
    "id": "node-red-iris-IRIS-CALL",
    "type": "subflow",
    "name": "IRIS_CALL",
    "info": "<p>Calls IRIS classmethods.</p>\n\n<details>\n    <summary>Required</summary>\n    <p>\n        <ul>\n            <li><a href=\"https://docs.intersystems.com/irislatest/csp/docbook/DocBook.UI.Page.cls?KEY=PAGE_nodejs_native\">Native API</a> (v 1.2.0) installed in Node-Red.</li>\n            <li><a href = \"https://github.com/phil1436/node-red-iris/tree/master/ObjectScript\">Node.IRISInterface</a> (v 1.3) class installed in IRIS and mapped to Namespace     <b>%ALL</b>.</li>\n        </ul>\n    </p>\n</details>\n\n<details>\n    <summary>Import Native API</summary>\n    <p>\n        In <code>.node-red\\settings.js</code> add Module in <code>functionGlobalContext</code>!\n        \n<pre>\nfunctionGlobalContext: {\n    iris:require('C:/InterSystems/IRIS/dev/nodejs/intersystems-iris-native')\n}\n</pre>\n</p>\n</details>\n\n<details>  \n    <summary>Connect to IRIS</summary>\n    <p>\n        Set connection properties via the node properties.\n    </p>\n</details>\n\n<details>\n    <summary>Check Connection</summary>\n    <p>\n        If enabled the node will check every 5 seconds if a connection is established and will show the status.\n    </p>\n</details>\n\n<details>\n    <summary>Call a Classmethod</summary>\n    <p>\n    Pass a JSON-Object or JSON-String in the <code>msg.data</code> field in form of:\n<pre>\n{\n    \"className\": \"PackageName.ClassName\",\n    \"method\": \"MethodName\",\n    \"parameters\": [Parameter1, Parameter2, ...],\n}\n</pre>\n</p>\n</details>\n\n<font size = -2>\n<br>\n<br>\nby Philipp B.\n<br>\nPowered by <a href= \"https://www.intersystems.com/\" style=\"color: #00b4ae\">InterSystems</a>.\n</font>\n<style>\ndetails > summary {\n  cursor: pointer;\n  font-size:20px;\n  background: #eee;\n  margin-bottom: 1rem;\n  padding: 0.5rem 1rem;\n}\n</style>",
    "category": "IRIS",
    "in": [
        {
            "x": 40,
            "y": 80,
            "wires": [
                {
                    "id": "98a84618046c3ed6"
                },
                {
                    "id": "faf2fb4062d45b91"
                }
            ]
        }
    ],
    "out": [
        {
            "x": 1070,
            "y": 80,
            "wires": [
                {
                    "id": "30473f1b40ba174d",
                    "port": 0
                },
                {
                    "id": "64591f51da237c80",
                    "port": 0
                },
                {
                    "id": "c82404619e39049d",
                    "port": 0
                }
            ]
        }
    ],
    "env": [
        {
            "name": "IP",
            "type": "str",
            "value": "localhost",
            "ui": {
                "icon": "font-awesome/fa-address-book",
                "type": "input",
                "opts": {
                    "types": [
                        "str",
                        "env"
                    ]
                }
            }
        },
        {
            "name": "Port",
            "type": "num",
            "value": "1972",
            "ui": {
                "icon": "font-awesome/fa-hashtag",
                "type": "input",
                "opts": {
                    "types": [
                        "num",
                        "env"
                    ]
                }
            }
        },
        {
            "name": "Namespace",
            "type": "str",
            "value": "User",
            "ui": {
                "icon": "font-awesome/fa-database",
                "type": "input",
                "opts": {
                    "types": [
                        "str",
                        "env"
                    ]
                }
            }
        },
        {
            "name": "Username",
            "type": "str",
            "value": "username",
            "ui": {
                "icon": "font-awesome/fa-male",
                "type": "input",
                "opts": {
                    "types": [
                        "str",
                        "env"
                    ]
                }
            }
        },
        {
            "name": "Password",
            "type": "str",
            "value": "password",
            "ui": {
                "icon": "font-awesome/fa-ellipsis-h",
                "type": "input",
                "opts": {
                    "types": [
                        "str",
                        "env"
                    ]
                }
            }
        },
        {
            "name": "Check Connection",
            "type": "bool",
            "value": "true",
            "ui": {
                "icon": "font-awesome/fa-adjust",
                "type": "checkbox"
            }
        }
    ],
    "meta": {
        "module": "IRIS_Call",
        "type": "IRIS_CALL",
        "version": "0.0.1",
        "author": "Philipp B.",
        "keywords": "IRIS,InterSystems,Database",
        "license": "MIT"
    },
    "color": "#3FADB5",
    "inputLabels": [
        "Input"
    ],
    "outputLabels": [
        "Status"
    ],
    "icon": "icons/InterSystems.svg",
    "status": {
        "x": 840,
        "y": 440,
        "wires": [
            {
                "id": "ba7f7b16dab70342",
                "port": 0
            }
        ]
    },
"flow":[
    {
        "id": "5dddc693a526ec62",
        "type": "change",
        "z": "node-red-iris-IRIS-CALL",
        "name": "Set Connection Properties",
        "rules": [
            {
                "t": "set",
                "p": "conn.IP",
                "pt": "msg",
                "to": "IP",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "conn.Port",
                "pt": "msg",
                "to": "Port",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "conn.Namespace",
                "pt": "msg",
                "to": "namespace",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "conn.Username",
                "pt": "msg",
                "to": "Username",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "conn.Password",
                "pt": "msg",
                "to": "Password",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 120,
        "wires": [
            [
                "64591f51da237c80"
            ]
        ]
    },
    {
        "id": "61c4b8cbbe2160b9",
        "type": "inject",
        "z": "node-red-iris-IRIS-CALL",
        "name": "check Connection",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 440,
        "wires": [
            [
                "8b19f40ced70c255"
            ]
        ]
    },
    {
        "id": "a8834710da50f09c",
        "type": "change",
        "z": "node-red-iris-IRIS-CALL",
        "name": "Set Connection Properties",
        "rules": [
            {
                "t": "set",
                "p": "IP",
                "pt": "msg",
                "to": "IP",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "Port",
                "pt": "msg",
                "to": "Port",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "Namespace",
                "pt": "msg",
                "to": "namespace",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "Username",
                "pt": "msg",
                "to": "Username",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "Password",
                "pt": "msg",
                "to": "Password",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 440,
        "wires": [
            [
                "ba7f7b16dab70342"
            ]
        ]
    },
    {
        "id": "78c45b334f20bdaf",
        "type": "comment",
        "z": "node-red-iris-IRIS-CALL",
        "name": "Show Connection Status",
        "info": "",
        "x": 170,
        "y": 400,
        "wires": []
    },
    {
        "id": "d52ee14ba0d7f6ae",
        "type": "comment",
        "z": "node-red-iris-IRIS-CALL",
        "name": "Do the Action",
        "info": "",
        "x": 90,
        "y": 20,
        "wires": []
    },
    {
        "id": "8b19f40ced70c255",
        "type": "switch",
        "z": "node-red-iris-IRIS-CALL",
        "name": "",
        "property": "Check Connection",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 440,
        "wires": [
            [
                "a8834710da50f09c"
            ]
        ]
    },
    {
        "id": "066d2e20b816bd79",
        "type": "catch",
        "z": "node-red-iris-IRIS-CALL",
        "name": "Catch if not JSON Object",
        "scope": [
            "b92a930aa9bea68c"
        ],
        "uncaught": false,
        "x": 290,
        "y": 20,
        "wires": [
            [
                "30473f1b40ba174d"
            ]
        ]
    },
    {
        "id": "ba7f7b16dab70342",
        "type": "function",
        "z": "node-red-iris-IRIS-CALL",
        "name": "checkConnection",
        "func": "//const irisnative = require('intersystems-iris-native')\nvar irisnative = global.get(\"iris\");\n//import irisnative from 'intersystems-iris-native';\nvar ip = msg.IP;\nvar port = msg.Port;\nvar namespace = msg.Namespace;\nvar username = msg.Username;\nvar password = msg.Password;\n\n// Create connection to InterSystems IRIS\nvar connection;\ntry{\n    connection = irisnative.createConnection({host: ip, port: port, ns: namespace, user: username, pwd: password})\n    msg.payload = ({fill: \"green\",text:\"Connected\"});\n}\ncatch(e){\n    msg.payload = ({fill: \"red\",text:\"Not Connected\"});\n    msg.error = e;\n    return msg;\n}\nconnection.close();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "64591f51da237c80",
        "type": "function",
        "z": "node-red-iris-IRIS-CALL",
        "name": "createClass",
        "func": "//Check if field exists\nif(!msg.data.hasOwnProperty(\"className\")){\n    throw \"Could not find className field!\"\n}\nif(!msg.data.hasOwnProperty(\"method\")){\n    throw \"Could not find method field!\"\n}\n//Set current Namespace if requested\nif(msg.hasOwnProperty(\"getNamespace\")){\n    msg.getNamespace = flow.get(\"namespace\");\n}\n\n\n//Get irisnative instance\n    //const irisnative = require('intersystems-iris-native')\nvar irisnative = global.get(\"iris\");\n    //import irisnative from 'intersystems-iris-native';\n\n//Set connection Properties\nvar ip = msg.conn.IP;\nvar port = msg.conn.Port;\nvar namespace = msg.conn.Namespace;\nvar username = msg.conn.Username;\nvar password = msg.conn.Password;\n\n// Create connection to InterSystems IRIS\nvar connection;\ntry{\n    connection = irisnative.createConnection({host: ip, port: port, ns: namespace, user: username, pwd: password})\n}\ncatch(e){\n    throw \"Could not connect to IRIS:\\n\" + e;\n}   \n\n// Create InterSystems IRIS native object\nconst iris = connection.createIris();\nif(msg.data[\"parameters\"] == undefined){msg.data[\"parameters\"] = []}\nlet props = [msg.data[\"className\"], msg.data[\"method\"]].concat(msg.data[\"parameters\"]);\n\nlet result = \"\";\ntry{\n    //Create the class\n    let f = iris.classMethodValue\n    result = f.apply(iris,props);\n    /*\n    result = iris.classMethodValue(msg.data[\"className\"],\n                                        msg.data[\"method\"],\n                                        props\n                                        );*/\n}\ncatch(e){\n    msg.result = e;\n    connection.close();\n    return msg;\n}\nmsg.result = result;\nconnection.close();\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"namespace\",env.get(\"Namespace\"));",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b92a930aa9bea68c",
        "type": "json",
        "z": "node-red-iris-IRIS-CALL",
        "name": "Convert to JSON Object",
        "property": "data",
        "action": "obj",
        "pretty": false,
        "x": 350,
        "y": 120,
        "wires": [
            [
                "5dddc693a526ec62"
            ]
        ]
    },
    {
        "id": "30473f1b40ba174d",
        "type": "function",
        "z": "node-red-iris-IRIS-CALL",
        "name": "Log JSON Error",
        "func": "throw \"Something went wrong with the JSON Object\";\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "4110a1f5e4bd6943",
        "type": "switch",
        "z": "node-red-iris-IRIS-CALL",
        "name": "ifMsg.getNamespaceIsNotNull",
        "property": "getNamespace",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 240,
        "wires": [
            [
                "c82404619e39049d"
            ]
        ]
    },
    {
        "id": "c82404619e39049d",
        "type": "change",
        "z": "node-red-iris-IRIS-CALL",
        "name": "setMsg.getNamespace",
        "rules": [
            {
                "t": "set",
                "p": "getNamespace",
                "pt": "msg",
                "to": "namespace",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "4a2db32bcc33b105",
        "type": "comment",
        "z": "node-red-iris-IRIS-CALL",
        "name": "Request Namespace",
        "info": "",
        "x": 340,
        "y": 200,
        "wires": []
    },
    {
        "id": "98a84618046c3ed6",
        "type": "switch",
        "z": "node-red-iris-IRIS-CALL",
        "name": "ifMsg.dataIsNotNull",
        "property": "data",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 130,
        "y": 160,
        "wires": [
            [
                "b92a930aa9bea68c"
            ],
            [
                "4110a1f5e4bd6943"
            ]
        ],
        "outputLabels": [
            "isNotNull",
            "isNull"
        ]
    },
    {
        "id": "faf2fb4062d45b91",
        "type": "switch",
        "z": "node-red-iris-IRIS-CALL",
        "name": "ifMsg.namespaceIsNotNull",
        "property": "namespace",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 380,
        "y": 320,
        "wires": [
            [
                "ab71caf794e86278"
            ]
        ]
    },
    {
        "id": "ab71caf794e86278",
        "type": "change",
        "z": "node-red-iris-IRIS-CALL",
        "name": "setNamespaceOnRuntime",
        "rules": [
            {
                "t": "set",
                "p": "namespace",
                "pt": "flow",
                "to": "namespace",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 320,
        "wires": [
            []
        ]
    }
]
}