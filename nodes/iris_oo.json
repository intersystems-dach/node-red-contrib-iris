{
    "id": "node-red-iris-IRIS-OO",
    "type": "subflow",
    "name": "IRIS_OO",
    "info": "<p>Inserts data into the IRIS Database.</p>\n\n<details>\n    <summary>Required</summary>\n    <p>\n        <ul>\n            <li><a href=\"https://docs.intersystems.com/irislatest/csp/docbook/DocBook.UI.Page.cls?KEY=PAGE_nodejs_native\">Native API</a> installed in Node-Red.</li>\n            <li><b>Node.IRISInterface</b> (v 1.0) class installed in IRIS and mapped to Namespace     <b>%ALL</b>.</li>\n        </ul>\n    </p>\n</details>\n\n<details>\n    <summary>Import Native API</summary>\n    <p>\n        In <code>.node-red\\settings.js</code> add Module in <code>functionGlobalContext</code>!\n        \n<pre>\nfunctionGlobalContext: {\n    iris:require('C:/InterSystems/IRIS/dev/nodejs/intersystems-iris-native')\n}\n</pre>\n</p>\n</details>\n\n<details>  \n    <summary>Connect to IRIS</summary>\n    <p>\n        Set connection properties via the node properties. The Node will build a connection when you deploy and will hold that connection up until you redeploy or disconnect manually.\n    </p>\n</details>\n\n<details>\n    <summary>Hold Connection</summary>\n    <p>\n        The connection will be hold as long as specified in the property, when no new messages arrives.\n    </p>\n</details>\n\n<details>\n    <summary>Check Connection</summary>\n    <p>\n        If enabled the node will check every 3 seconds if a connection is established and will show the status.\n    </p>\n</details>\n\n<details>\n    <summary>Connection Status</summary>\n    <p>\n        <ul>\n            <li><font color = \"red\">Not Connected</font>: No Connection established, because could not connect or disconnected manually.</li>\n            <li><font color = \"yellow\">On Hold</font>: The connection is not established, but will build a connection as soon as a message arrives.</li>\n            <li><font color = \"green\">Connected</font>: Connected to IRIS.</li>\n        </ul>\n    </p>\n</details>\n\n<details>\n    <summary>Insert Data via JSON</summary>\n    <p>\n        Pass a JSON-Object in the <code>msg.data</code> with a field <b>\"className\"</b>. \n        Example:\n<pre>\nmsg.data = {\n    \"className\":\"Node.Person\",\n    \"firstName\":\"John\",\n    \"lastName\":\"Smith\",\n    \"age\":42,\n    \"Pet\":{\n        \"className\":\"Node.Animal\",\n        \"kind\":\"Dog\",\n        \"name\":\"Max\"\n    }\n}\n</pre>\nor when the object already exists, add a field <b>\"id\"</b>\n<pre>\nmsg.data = {\n    \"className\":\"Node.Person\",\n    \"firstName\":\"John\",\n    \"lastName\":\"Smith\",\n    \"age\":42,\n    \"Pet\":{\n        \"className\":\"Node.Animal\",\n        \"id\":1\n    }\n}\n</pre>\n    </p>\n</details>\n\n<details>\n    <summary>Set Properties during runtime</summary>\n    <p>\n        <ul>\n            <li>Close connection during runtime with <code>msg.connect</code> set to <code>false</code> or <code>0</code>.</li>\n            <li>Reconnect during runtime with <code>msg.connect</code> set to <code>true</code> or <code>1</code>.</li>\n            <li>Set the namespace during runtime with <code>msg.namespace</code>.</li>\n            <li>To request the current namespace via runtime define a field <code>msg.getNamespace</code>.The current namespace will be written in this field.</li>\n         </ul>\n    </p>\n</details>\n\n<details>\n    <summary>Exceptions</summary>\n    <p>\n        <ul>\n            <li>Throws an Error if <code>msg.data</code> is not correct or could not connect to IRIS.</li>\n            <li>Writes <code>1</code> into <code>msg.result</code>, when insert was successful. Writes <code>0</code> when it was unsuccesful, with the error message in <code>msg.error</code>.</li>\n        </ul>\n    </p>\n</details>\n<font size=-2>\n<br>\n<br>\nby Philipp B.\n<br>\nPowered by <a href= \"https://www.intersystems.com/\" style=\"color: #00b4ae\">InterSystems</a>.\n</font>\n<style>\ndetails > summary {\n  cursor: pointer;\n  font-size:20px;\n  background: #eee;\n  margin-bottom: 1rem;\n  padding: 0.5rem 1rem;\n}\n</style>",
    "category": "IRIS",
    "in": [
        {
            "x": 80,
            "y": 300,
            "wires": [
                {
                    "id": "d7c11ec290ab7519"
                },
                {
                    "id": "44622654b9a2ea58"
                },
                {
                    "id": "7b69d9f5a6cab0c2"
                },
                {
                    "id": "fa71167f0f30ff7d"
                }
            ]
        }
    ],
    "out": [
        {
            "x": 1150,
            "y": 160,
            "wires": [
                {
                    "id": "fde8bc837ba9daaf",
                    "port": 0
                },
                {
                    "id": "692b03b4de646415",
                    "port": 0
                }
            ]
        }
    ],
    "env": [
        {
            "name": "IP",
            "type": "str",
            "value": "localhost",
            "ui": {
                "icon": "font-awesome/fa-address-book",
                "type": "input",
                "opts": {
                    "types": [
                        "str",
                        "env"
                    ]
                }
            }
        },
        {
            "name": "Port",
            "type": "num",
            "value": "1972",
            "ui": {
                "icon": "font-awesome/fa-hashtag",
                "type": "input",
                "opts": {
                    "types": [
                        "num",
                        "env"
                    ]
                }
            }
        },
        {
            "name": "Namespace",
            "type": "str",
            "value": "User",
            "ui": {
                "icon": "font-awesome/fa-database",
                "type": "input",
                "opts": {
                    "types": [
                        "str",
                        "env"
                    ]
                }
            }
        },
        {
            "name": "Username",
            "type": "str",
            "value": "username",
            "ui": {
                "icon": "font-awesome/fa-male",
                "type": "input",
                "opts": {
                    "types": [
                        "str",
                        "env"
                    ]
                }
            }
        },
        {
            "name": "Password",
            "type": "str",
            "value": "password",
            "ui": {
                "icon": "font-awesome/fa-ellipsis-h",
                "type": "input",
                "opts": {
                    "types": [
                        "str",
                        "env"
                    ]
                }
            }
        },
        {
            "name": "holdConnection",
            "type": "num",
            "value": "10",
            "ui": {
                "icon": "font-awesome/fa-clock-o",
                "label": {
                    "en-US": "Hold Connection (seconds)"
                },
                "type": "input",
                "opts": {
                    "types": [
                        "num",
                        "env"
                    ]
                }
            }
        },
        {
            "name": "Check Connection",
            "type": "bool",
            "value": "true",
            "ui": {
                "icon": "font-awesome/fa-adjust",
                "type": "checkbox"
            }
        }
    ],
    "meta": {
        "module": "IRIS_OO",
        "version": "0.0.1",
        "author": "Philipp B.",
        "keywords": "IRIS,InterSystems,Database"
    },
    "color": "#3FADB5",
    "inputLabels": [
        "Input"
    ],
    "outputLabels": [
        "Status"
    ],
    "icon": "icons/InterSystems.svg",
    "status": {
        "x": 740,
        "y": 740,
        "wires": [
            {
                "id": "44b42964b91966b4",
                "port": 0
            }
        ]
    },
"flow":[
    {
        "id": "0438057603188e0c",
        "type": "inject",
        "z": "node-red-iris-IRIS-OO",
        "name": "check Connection",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 740,
        "wires": [
            [
                "f4b4cd82e887f1cb"
            ]
        ]
    },
    {
        "id": "4d49f981942a0e9f",
        "type": "comment",
        "z": "node-red-iris-IRIS-OO",
        "name": "Show Connection Status",
        "info": "",
        "x": 150,
        "y": 680,
        "wires": []
    },
    {
        "id": "9312fecda70b6eb1",
        "type": "comment",
        "z": "node-red-iris-IRIS-OO",
        "name": "Do the Action",
        "info": "",
        "x": 210,
        "y": 40,
        "wires": []
    },
    {
        "id": "f4b4cd82e887f1cb",
        "type": "switch",
        "z": "node-red-iris-IRIS-OO",
        "name": "ifCheckConnection",
        "property": "Check Connection",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 330,
        "y": 740,
        "wires": [
            [
                "44b42964b91966b4"
            ]
        ]
    },
    {
        "id": "44b42964b91966b4",
        "type": "function",
        "z": "node-red-iris-IRIS-OO",
        "name": "checkConnection/PERF",
        "func": "var conn = flow.get(\"conn\");\nif(conn.isClosed()){\n    var onHold = flow.get(\"onHold\")||false;\n    if(!onHold){\n        msg.payload = ({fill: \"red\",text:\"Not Connected\"});\n    }\n    else{\n        msg.payload = ({fill:\"yellow\",text:\"On Hold\"});\n    }\n}\nelse{\n    msg.payload = ({fill: \"green\",text:\"Connected\"});\n    flow.set(\"onHold\",-1);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "d7c11ec290ab7519",
        "type": "switch",
        "z": "node-red-iris-IRIS-OO",
        "name": "ifMsg.dataIsNotNull",
        "property": "data",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 220,
        "wires": [
            [
                "70407657568dfcce"
            ],
            [
                "eaf6767a20f550fa"
            ]
        ],
        "outputLabels": [
            "isNotNull",
            "isNull"
        ]
    },
    {
        "id": "44622654b9a2ea58",
        "type": "switch",
        "z": "node-red-iris-IRIS-OO",
        "name": "ifMsg.connectIsNotNull",
        "property": "connect",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 460,
        "y": 420,
        "wires": [
            [
                "43b63310e3f6b6ae"
            ]
        ]
    },
    {
        "id": "43b63310e3f6b6ae",
        "type": "function",
        "z": "node-red-iris-IRIS-OO",
        "name": "setConnectionOnRuntime",
        "func": "flow.set(\"onHold\", false);\n\nif(msg.connect == false||0){\n    if(!flow.get(\"conn\").isClosed()){\n        flow.get(\"conn\").close();\n    }\n}\nelse if(flow.get(\"conn\").isClosed() && (msg.connect == true||1)){\n    var irisnative = global.get(\"iris\");\n    //import irisnative from 'intersystems-iris-native';\n    var ip = env.get(\"IP\");\n    var port = env.get(\"Port\");\n    var namespace = env.get(\"Namespace\");\n    var username = env.get(\"Username\");\n    var password = env.get(\"Password\");\n    // Create connection to InterSystems IRIS\n    var connection;\n    try{\n        connection = irisnative.createConnection({host: ip, port: port, ns: namespace, user: username, pwd: password})\n    }\n    catch(e){\n        msg.error = e;\n        return msg;\n    }\n    const iris = connection.createIris();\n    flow.set(\"conn\", connection);\n    flow.set(\"iris\", iris);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "7b69d9f5a6cab0c2",
        "type": "switch",
        "z": "node-red-iris-IRIS-OO",
        "name": "ifMsg.namespaceIsNotNull",
        "property": "namespace",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 480,
        "y": 480,
        "wires": [
            [
                "c5b334b9a74cf5e2"
            ]
        ]
    },
    {
        "id": "c5b334b9a74cf5e2",
        "type": "change",
        "z": "node-red-iris-IRIS-OO",
        "name": "setNamespaceOnRuntime",
        "rules": [
            {
                "t": "set",
                "p": "namespace",
                "pt": "flow",
                "to": "namespace",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "eaf6767a20f550fa",
        "type": "switch",
        "z": "node-red-iris-IRIS-OO",
        "name": "ifMsg.getNamespaceIsNotNull",
        "property": "getNamespace",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 530,
        "y": 240,
        "wires": [
            [
                "fde8bc837ba9daaf"
            ]
        ]
    },
    {
        "id": "fde8bc837ba9daaf",
        "type": "change",
        "z": "node-red-iris-IRIS-OO",
        "name": "setMsg.getNamespace",
        "rules": [
            {
                "t": "set",
                "p": "getNamespace",
                "pt": "msg",
                "to": "namespace",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "866b04bfe82e7b50",
        "type": "comment",
        "z": "node-red-iris-IRIS-OO",
        "name": "Set Properties during runtime",
        "info": "",
        "x": 480,
        "y": 380,
        "wires": []
    },
    {
        "id": "9f071eb7a99a7890",
        "type": "comment",
        "z": "node-red-iris-IRIS-OO",
        "name": "Request Namespace",
        "info": "",
        "x": 500,
        "y": 200,
        "wires": []
    },
    {
        "id": "fc0d57c2678da0ba",
        "type": "trigger",
        "z": "node-red-iris-IRIS-OO",
        "name": "holdConnectionTrigger",
        "op1": "1",
        "op2": "0",
        "op1type": "num",
        "op2type": "num",
        "duration": "10",
        "extend": true,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 540,
        "y": 600,
        "wires": [
            [
                "196119cf38a1037c"
            ]
        ]
    },
    {
        "id": "358d5f2366be550c",
        "type": "inject",
        "z": "node-red-iris-IRIS-OO",
        "name": "injectHoldConnection",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 140,
        "y": 600,
        "wires": [
            [
                "fa71167f0f30ff7d"
            ]
        ]
    },
    {
        "id": "196119cf38a1037c",
        "type": "function",
        "z": "node-red-iris-IRIS-OO",
        "name": "setOnHold",
        "func": "if(msg.payload == 0 && !flow.get(\"conn\").isClosed()){\n    flow.get(\"conn\").close();\n    flow.set(\"onHold\", true);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "fa71167f0f30ff7d",
        "type": "function",
        "z": "node-red-iris-IRIS-OO",
        "name": "setDelay",
        "func": "msg.delay = env.get(\"holdConnection\") * 1000;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 600,
        "wires": [
            [
                "fc0d57c2678da0ba"
            ]
        ]
    },
    {
        "id": "fa763efcabb08638",
        "type": "function",
        "z": "node-red-iris-IRIS-OO",
        "name": "execute insert object oriented",
        "func": "if(flow.get(\"conn\").isClosed()){\n    if(flow.get(\"onHold\")){\n        buildConnection();\n    }\n    else{\n        throw \"No Connection established!\";\n    }\n}\nconst iris = flow.get(\"iris\");\nconst namespace = flow.get(\"namespace\")\ntry{\n    msg.result = insertObjectOriented(msg.data);\n    if(msg.result != 1){\n        msg.error = msg.result\n        msg.result = 0\n    }\n}catch(e){\n    msg.error = e.message\n    msg.result = 0\n}\n\n\nreturn msg;\n\n/*FUNCTIONS*/\n\n//Calls the objectscript method to Insert data\nfunction insertObjectOriented(jsonstring){\n    var r = iris.classMethodValue(\"Node.IRISInterface\",\n                                            \"InsertObjectOriented\",\n                                            namespace,\n                                            jsonstring);\n    return r;\n}\n\nfunction buildConnection(){\n    var irisnative = global.get(\"iris\");\n    //import irisnative from 'intersystems-iris-native';\n    var ip = env.get(\"IP\");\n    var port = env.get(\"Port\");\n    var namespace = env.get(\"Namespace\");\n    var username = env.get(\"Username\");\n    var password = env.get(\"Password\");\n    // Create connection to InterSystems IRIS\n    flow.set(\"onHold\", false);\n    var connection;\n    try{\n        connection = irisnative.createConnection({host: ip, port: port, ns: namespace, user: username, pwd: password})\n    }\n    catch(e){\n        throw \"Could not connect to IRIS!\"\n    }\n    const iris = connection.createIris();\n    flow.set(\"conn\", connection);\n    flow.set(\"iris\", iris);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n//Get irisnative\n        //const irisnative = require('intersystems-iris-native')\nvar irisnative = global.get(\"iris\");\n        //import irisnative from 'intersystems-iris-native';\n\n//Set Connection Properties\nvar ip =env.get(\"IP\");\nvar port = env.get(\"Port\");\nvar namespace = env.get(\"Namespace\");\nvar username =env.get(\"Username\");\nvar password =env.get(\"Password\");\n\n//Connect\nvar connection;\ntry{\n    connection = irisnative.createConnection({host: ip, port: port, ns: namespace, user: username, pwd: password})\n}\ncatch(e){\n    flow.set(\"onHold\", false);\n   let connectionClass = class{isClosed(){return true;}}; \n      flow.set(\"conn\", new connectionClass());\n        throw \"Could not connect to IRIS:\\n\" + e;\n}   \n\n// Create InterSystems IRIS native object\nconst iris = connection.createIris();\nflow.set(\"conn\", connection);\nflow.set(\"iris\", iris);\nflow.set(\"namespace\",env.get(\"Namespace\"));",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\nif(!flow.get(\"conn\").isClosed()){\n    flow.get(\"conn\").close();\n}",
        "libs": [],
        "x": 710,
        "y": 80,
        "wires": [
            [
                "692b03b4de646415"
            ]
        ]
    },
    {
        "id": "9031c0e2dbbd07c2",
        "type": "json",
        "z": "node-red-iris-IRIS-OO",
        "name": "toJSONString",
        "property": "data",
        "action": "str",
        "pretty": false,
        "x": 480,
        "y": 80,
        "wires": [
            [
                "fa763efcabb08638"
            ]
        ]
    },
    {
        "id": "70407657568dfcce",
        "type": "function",
        "z": "node-red-iris-IRIS-OO",
        "name": "checkIfClassNameExists",
        "func": "if(!hasClassName(msg.data)){\n    throw \"Data does not have ClassName-Property\"\n}\n\nreturn msg;\nfunction hasClassName(obj){\n    keys = Object.keys(obj)\n    let b = false\n    for(let k in keys){\n        if(typeof obj[keys[k]] == 'object'){\n            let c = hasClassName(obj[keys[k]])\n            if(!c){\n                return false\n            }\n        }\n        if(keys[k] == 'className'){\n            b = true\n        }\n    }\n    return b\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 80,
        "wires": [
            [
                "9031c0e2dbbd07c2"
            ]
        ]
    },
    {
        "id": "692b03b4de646415",
        "type": "json",
        "z": "node-red-iris-IRIS-OO",
        "name": "toJSONObj",
        "property": "data",
        "action": "obj",
        "pretty": false,
        "x": 930,
        "y": 80,
        "wires": [
            []
        ]
    }
]
}