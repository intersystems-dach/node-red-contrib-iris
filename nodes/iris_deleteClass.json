{
    "id": "node-red-iris-IRIS-DELETE-CLASS",
    "type": "subflow",
    "name": "IRIS_DELETE_CLASS",
    "info": "<p>Deletes a IRIS Class.</p>\n\n<details>\n    <summary>Required</summary>\n    <p>\n        <ul>\n            <li><a href=\"https://docs.intersystems.com/irislatest/csp/docbook/DocBook.UI.Page.cls?KEY=PAGE_nodejs_native\">Native API</a> (v 1.2.0) installed in Node-Red.</li>\n            <li><a href = \"https://github.com/intersystems-dach/node-red-iris/tree/master/ObjectScript\">Node.IRISInterface</a> (v 1.3) class installed in IRIS and mapped to Namespace     <b>%ALL</b>.</li>\n        </ul>\n    </p>\n</details>\n\n<details>\n    <summary>Import Native API</summary>\n    <p>\n        In <code>.node-red\\settings.js</code> add Module in <code>functionGlobalContext</code>!\n        \n<pre>\nfunctionGlobalContext: {\n    iris:require('C:/InterSystems/IRIS/dev/nodejs/intersystems-iris-native')\n}\n</pre>\n</p>\n</details>\n\n<details>  \n    <summary>Connect to IRIS</summary>\n    <p>\n        Set connection properties via the node properties.\n    </p>\n</details>\n\n<details>\n    <summary>Check Connection</summary>\n    <p>\n        If enabled the node will check every 5 seconds if a connection is established and will show the status.\n    </p>\n</details>\n\n<details>\n    <summary>Delete a Class</summary>\n<p>\nPass a JSON-Object or JSON-String in the <code>msg.data</code> field in form of:\n<pre>\n{\n    \"package\": \"PackageName\",\n    \"className\": \"ClassName\",\n}\n</pre>\n</p>\n</details>\n\n<font size=-2>\n<br>\n<br>\nby Philipp B.\n<br>\nPowered by <a href= \"https://www.intersystems.com/\" style=\"color: #00b4ae\">InterSystems</a>.\n</font>\n<style>\ndetails > summary {\n  cursor: pointer;\n  font-size:20px;\n  background: #eee;\n  margin-bottom: 1rem;\n  padding: 0.5rem 1rem;\n}\n</style>",
    "category": "IRIS",
    "in": [
        {
            "x": 40,
            "y": 80,
            "wires": [
                {
                    "id": "5a3e58eeb171719a"
                }
            ]
        }
    ],
    "out": [
        {
            "x": 830,
            "y": 60,
            "wires": [
                {
                    "id": "d82fa232149789a6",
                    "port": 0
                },
                {
                    "id": "94c98c9e8a3e3362",
                    "port": 0
                }
            ]
        }
    ],
    "env": [
        {
            "name": "IP",
            "type": "str",
            "value": "localhost",
            "ui": {
                "icon": "font-awesome/fa-address-book",
                "type": "input",
                "opts": {
                    "types": [
                        "str",
                        "env"
                    ]
                }
            }
        },
        {
            "name": "Port",
            "type": "num",
            "value": "1972",
            "ui": {
                "icon": "font-awesome/fa-hashtag",
                "type": "input",
                "opts": {
                    "types": [
                        "num",
                        "env"
                    ]
                }
            }
        },
        {
            "name": "Namespace",
            "type": "str",
            "value": "User",
            "ui": {
                "icon": "font-awesome/fa-database",
                "type": "input",
                "opts": {
                    "types": [
                        "str",
                        "env"
                    ]
                }
            }
        },
        {
            "name": "Username",
            "type": "str",
            "value": "username",
            "ui": {
                "icon": "font-awesome/fa-male",
                "type": "input",
                "opts": {
                    "types": [
                        "str",
                        "env"
                    ]
                }
            }
        },
        {
            "name": "Password",
            "type": "str",
            "value": "password",
            "ui": {
                "icon": "font-awesome/fa-ellipsis-h",
                "type": "input",
                "opts": {
                    "types": [
                        "str",
                        "env"
                    ]
                }
            }
        },
        {
            "name": "Check Connection",
            "type": "bool",
            "value": "true",
            "ui": {
                "icon": "font-awesome/fa-adjust",
                "type": "checkbox"
            }
        }
    ],
    "meta": {
        "module": "IRIS_DELETE_CLASS",
        "type": "IRIS_DELETE_CLASS",
        "version": "0.0.1",
        "author": "Philipp B.",
        "keywords": "IRIS,InterSystems,Database"
    },
    "color": "#3FADB5",
    "inputLabels": [
        "Input"
    ],
    "outputLabels": [
        "Status"
    ],
    "icon": "icons/InterSystems.svg",
    "status": {
        "x": 840,
        "y": 240,
        "wires": [
            {
                "id": "e72ad4f8544a2f79",
                "port": 0
            }
        ]
    },
"flow":[
    {
        "id": "f9105b39514a2f59",
        "type": "change",
        "z": "node-red-iris-IRIS-DELETE-CLASS",
        "name": "Set Connection Properties",
        "rules": [
            {
                "t": "set",
                "p": "conn.IP",
                "pt": "msg",
                "to": "IP",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "conn.Port",
                "pt": "msg",
                "to": "Port",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "conn.Namespace",
                "pt": "msg",
                "to": "Namespace",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "conn.Username",
                "pt": "msg",
                "to": "Username",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "conn.Password",
                "pt": "msg",
                "to": "Password",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 80,
        "wires": [
            [
                "94c98c9e8a3e3362"
            ]
        ]
    },
    {
        "id": "de106e2c4eb96cf7",
        "type": "inject",
        "z": "node-red-iris-IRIS-DELETE-CLASS",
        "name": "check Connection",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 240,
        "wires": [
            [
                "71a81a6081470737"
            ]
        ]
    },
    {
        "id": "78ebbe7159ab76cb",
        "type": "change",
        "z": "node-red-iris-IRIS-DELETE-CLASS",
        "name": "Set Connection Properties",
        "rules": [
            {
                "t": "set",
                "p": "IP",
                "pt": "msg",
                "to": "IP",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "Port",
                "pt": "msg",
                "to": "Port",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "Namespace",
                "pt": "msg",
                "to": "Namespace",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "Username",
                "pt": "msg",
                "to": "Username",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "Password",
                "pt": "msg",
                "to": "Password",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 240,
        "wires": [
            [
                "e72ad4f8544a2f79"
            ]
        ]
    },
    {
        "id": "db97f0c3fda619f6",
        "type": "comment",
        "z": "node-red-iris-IRIS-DELETE-CLASS",
        "name": "Show Connection Status",
        "info": "",
        "x": 150,
        "y": 180,
        "wires": []
    },
    {
        "id": "41f76951849c8336",
        "type": "comment",
        "z": "node-red-iris-IRIS-DELETE-CLASS",
        "name": "Do the Action",
        "info": "",
        "x": 90,
        "y": 20,
        "wires": []
    },
    {
        "id": "71a81a6081470737",
        "type": "switch",
        "z": "node-red-iris-IRIS-DELETE-CLASS",
        "name": "",
        "property": "Check Connection",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 240,
        "wires": [
            [
                "78ebbe7159ab76cb"
            ]
        ]
    },
    {
        "id": "5f686d4909b0df9d",
        "type": "catch",
        "z": "node-red-iris-IRIS-DELETE-CLASS",
        "name": "Catch if not JSON Object",
        "scope": [
            "5a3e58eeb171719a"
        ],
        "uncaught": false,
        "x": 290,
        "y": 20,
        "wires": [
            [
                "d82fa232149789a6"
            ]
        ]
    },
    {
        "id": "e72ad4f8544a2f79",
        "type": "function",
        "z": "node-red-iris-IRIS-DELETE-CLASS",
        "name": "checkConnection",
        "func": "//const irisnative = require('intersystems-iris-native')\nvar irisnative = global.get(\"iris\");\n//import irisnative from 'intersystems-iris-native';\nvar ip = msg.IP;\nvar port = msg.Port;\nvar namespace = msg.Namespace;\nvar username = msg.Username;\nvar password = msg.Password;\n\n// Create connection to InterSystems IRIS\nvar connection;\ntry{\n    connection = irisnative.createConnection({host: ip, port: port, ns: namespace, user: username, pwd: password})\n    msg.payload = ({fill: \"green\",text:\"Connected\"});\n}\ncatch(e){\n    msg.payload = ({fill: \"red\",text:\"Not Connected\"});\n    msg.error = e;\n    return msg;\n}\nconnection.close();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "94c98c9e8a3e3362",
        "type": "function",
        "z": "node-red-iris-IRIS-DELETE-CLASS",
        "name": "deleteClass",
        "func": "//Check if field exists\nif(!msg.data.hasOwnProperty(\"package\")){\n    throw \"Could not find package field!\"\n}\nif(!msg.data.hasOwnProperty(\"className\")){\n    throw \"Could not find className field!\"\n}\n\n//const irisnative = require('intersystems-iris-native')\nvar irisnative = global.get(\"iris\");\n//import irisnative from 'intersystems-iris-native';\nvar ip = msg.conn.IP;\nvar port = msg.conn.Port;\nvar namespace = msg.conn.Namespace;\nvar username = msg.conn.Username;\nvar password = msg.conn.Password;\n\n// Create connection to InterSystems IRIS\nvar connection;\ntry{\n    connection = irisnative.createConnection({host: ip, port: port, ns: namespace, user: username, pwd: password})\n}\ncatch(e){\n    throw \"Could not connect to IRIS:\\n\" + e;\n}   \n// Create InterSystems IRIS native object\nconst iris = connection.createIris();\n\ntry{\n    var result = iris.classMethodValue(\"Node.IRISInterface\",\n                                        \"DeleteClass\",\n                                        msg.conn.Namespace,\n                                        msg.data[\"package\"],\n                                        msg.data[\"className\"]\n                                        );\n}\ncatch(e){\n    msg.error = \"Could not delete Class:\\n\" + e;\n    result = 0;\n}\n\nmsg.result = result;\nconnection.close();\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "5a3e58eeb171719a",
        "type": "json",
        "z": "node-red-iris-IRIS-DELETE-CLASS",
        "name": "Convert to JSON Object",
        "property": "data",
        "action": "obj",
        "pretty": false,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "f9105b39514a2f59"
            ]
        ]
    },
    {
        "id": "d82fa232149789a6",
        "type": "function",
        "z": "node-red-iris-IRIS-DELETE-CLASS",
        "name": "Log JSON Error",
        "func": "msg.error = \"Something went wrong with the JSON Object\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 20,
        "wires": [
            []
        ]
    }
]}